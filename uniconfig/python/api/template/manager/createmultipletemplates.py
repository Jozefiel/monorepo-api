# generated by datamodel-codegen:
#   filename:  uniconfigV3.yaml

from __future__ import annotations

from typing import Optional

from pydantic import BaseModel
from pydantic import Field

from ...frinx import types
from . import TagIdentityref


class Template(BaseModel):
    class Config:
        allow_population_by_field_name = True

    yang_repository: Optional[str] = Field(None, alias='yang-repository')
    """
    Name of yang-repository used for parsing of template configuration.
    It contains identifier of the YANG schema repository.
    """
    template_configuration: str = Field(..., alias='template-configuration')
    """
    Template configuration without wrapping 'configuration' element
    (only content of template).
    """
    template_name: str = Field(..., alias='template-name')
    """
    Identifier of the template.
    """


class Tag(BaseModel):
    class Config:
        allow_population_by_field_name = True

    paths: Optional[list[str]] = None
    """
    List of paths on which tag should be applied to. Paths must be specified as relative
    paths to root 'configuration' container and formatted based on RFC-8040 rules.
    """
    tag: Optional[TagIdentityref] = None


class Input(BaseModel):
    class Config:
        allow_population_by_field_name = True

    templates: Optional[list[Template]] = None
    tags: Optional[list[Tag]] = None
    """
    List of template tags that are additionally written into template configuration.
    """


class NodeResultItem(BaseModel):
    class Config:
        allow_population_by_field_name = True

    node_id: Optional[str] = Field(None, alias='node-id')
    error_type: Optional[types.ErrorType] = Field(None, alias='error-type')
    error_message: Optional[str] = Field(None, alias='error-message')
    """
    Error message describing cause of error.
    """
    status: types.OperationResultType


class Output(BaseModel):
    class Config:
        allow_population_by_field_name = True

    error_message: Optional[str] = Field(None, alias='error-message')
    """
    Error message that describe overall problem.
    """
    node_result: Optional[list[NodeResultItem]] = Field(None, alias='node-result')
    """
    RPC results per target template node.
    """
    overall_status: types.OperationResultType = Field(..., alias='overall-status')
